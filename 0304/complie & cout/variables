// 배운 내용 : 컴파일, cout, 변수와 메모리 타입 

#include <iostream> 

int main() 
{
std::cout << "원하는 텍스트를 작성하면 출력이 된다.";
std::cout << "원하는 텍스트를 작성하면 출력이 된다.";

return 0;
}

// 주석. 코드에 대한 설명. 실제 코드에 영향 X. 
/* 
여러줄 주석을
처리할 때 사용
*/
// 항상 주석을 다는 습관 필요. 회사에서는 아래와 같이 씀.

// 2022.03.04
// 작성자: 김보원
// 내용 : 

/* 
앞에 #이 붙어있으면 전처리기.
전처리기는 컴파일 전에 처리. 그 후 컴파일.
컴파일 (코드 번역 작업) -> 실행파일 생성
*/

/* 
#include는 컴파일을 하기 전에 원하는 헤더파일을 여기에 포함시켜서
해당 헤더파일에서 제공되는 기능을 여기에서 사용할 수 있게 해주는 것.
컴파일 되기 전에 포함시킨 후, 컴파일하고 그 내용까지 나올 수 있게 하는 것.
*/

// iostream : C++의 표준 입출력 기능 제공

/* 
main 함수는 C++콘솔의 시작점(여기서부터 시작된다)을 알려주는 함수. 
main의 {} (<-코드블럭) 안에 있는 코드가 실제도 동작이 된다.
*/

/*
솔루션은 하나 이상의 프로젝트를 담기 위한 그릇이다.
코드가 완성되어서 실행하려면  Ctrl + Shift + B 를 이용해서 빌드를 함.
빌드를 하면 컴파일이 자동으로 이루어진다. 
주의) 빌드하는 것은 성공/ 실패 등등이 표시되고 실행파일만 생성되는 것. 실행 파일 실행은 X
Ctrl + F5 : 만들어진 실행 파일 실행
*/

/*
C++에서 제공되는 대부분의 기능들은 std 라는 namespace로 감싸져 있다.
C++ 은 이름이 중복되면 안됨. 이름이 중복되는 것을 방지하기 위해 namespace로 기능들을 감싸주었다.
이 경우 std namespace를 통해서 감싸진 기능들에 접근해야 한다.
C++의 콘솔창에서 출력하기 위해 제공되는 기능으로 cout 이 있다. 
cout 은 std namespace 안에 포함되어 있기 때문에 ::(범위지정 연산자, 스코프 연산자)를
통해서 접근하게 된다. 
std::cout 은 std 안에 있는 cout 이라는 의미로 사용한다. 
만약 cout 이라는 이름으로 다른 것을 만들었다면
std::cout 과 cout 은 다르다.
*/

std::cout << "원하는 텍스트를 작성하면 출력이 된다.";
std::cout << "원하는 텍스트를 작성하면 출력이 된다.";
// C언어의 printf 사용해도 출력 가능.
printf("printf를 이용한 출력입니다.\n";

/* 
; 은 마침표. 한 줄이 끝났을 경우 붙여준다. 
코드는 위에서 아래로 실행된다.
보통 오른쪽에서 왼쪽으로 동작이 된다.
ex. std::cout << "첫 번째 출력" ; : 첫 번째 출력을 cout 해라.
    std::cout << "첫 번째 출력" << "두 번째 출력" : 첫 번째 출력과 두 번째 출력을 cout 해라. 
\n : 한 줄 띄우기. = endl; 
std::cout << std::endl; = std::cout << "\n"; 
 cf. \n 자체를 출력: \\n. 따옴표, 역슬러쉬 같은 종류의 특수문자 출력은 앞에 \붙이기.
\t : tab. (잘 사용 안 함.)

/*
컴퓨터 기본 이론***

프로그램이 동작될 때 필요한 데이터들은 메모리에 저장이 된다.
메모리 : 주기억 장치
하드디스크 또는  ssd : 보조기억장치

주기억장치 : 휘발성. 프로그램이 종료되면 저장하고 있던 데이터가 사라짐.
보조기억장치 : 비휘발성(=반영구적). 반영구적으로 저장이 가능.

용량의 최소 단위는 bit 이다. ***
1byte : 8bit
1kbyte : 1024byte
1mbyte : 1024kbyte
1gbyte : 1024mbyte
1tbyte : 1024gbyte

1bit : 0, 1 둘 중 하나의 값을 저장.
1byte는 256 (2^8)가지의 값을 표현할 수 있다.

C++에서 데이터를 저장하기 위한 수단 : 변수

참/거짓은 0은 거짓. 0이 아닌 모든 수는 참.

문자를 저장할 때는 일반 숫자로 저장하고 
출력할 때는 아스키 코드표를 참조해서 값에 해당하는 문자를 출력.
문자도 일반 값으로 저장이 되고 출력할 때만 아스키 코드표에 해당하는 문자를 출력.

|  타입  | 메모리 크기 |   표현 종류  | 값의 표현 범위
|  bool  |    1byte   | 참(1)/거짓(0)| true/false 
|  char  |    1byte   |     문자     | -128 ~ 127 (0 포함)
|  short |    2byte   |     정수     | -32768 ~ 32767
|   int  |    4byte   |     정수     | -21억xxx ~ 21억xxx (2^32)
| __int  |    8byte   |     정수     | 천문학적인 값. 

*bool : 몬스터가 해야 할 일, 하지 말아야 할 일 다 따져서 정해줘야함 
*__int : (오래된 게임 같은 경우 유저들이 돈 21억 이상으로 모았을 때 등에 사용. 
         주로 10억 이상의 값을 표현할 때 사용
         
소숫점 단위 표현(float, double)
| float  |    4byte   |  부동소수점(=소수점 자리가 움직일 수 있음) | 소수점 5자리까지
| double |    8byte   |  부동소수점 

*float : 게임쪽에서 double 말고 float를 주로 사용. 
         소수점이 6자리 이상이면 6번째 소수점이 반올림되어 최종적으로 5자리로 표시됨. 
*double : 정밀한 소수점까지 요하는 시뮬이나 증권가에서 사용. 게임쪽에서 거의 사용 X.
*/

// FLT_MIN : F12키를 이용해 코드의 구현 부분으로 이동 가능. FLT_MIN 은 이미 있는 명령어. 참고용.

std::cout << 3.141597f << std::endl;
/* 
3.141597f : 실수 뒤에 f 붙여주면 float 타입의 실수.
3.141597  : 실수 뒤에 아무것도 없으면 double 타입의 실수.

int PlayerHP; // 나 지금 메모리 4byte 쓸거야.
PlayerHP = 100; // = 는 대입 연산자. 오른쪽의 값을 왼쪽의 변수에 넣어준다.
std::cout << PlayerHP << std::endl; //cout에 변수를 넣어주면 해당하는 "값"을 출력함.
*/

// 느낀 점
아주 기본적인 것들인데 코드 뿐만 아니라 컴퓨터 기본 지식도 알아야해서
배울 게 많다는 것을 느꼈다.
열심히 해보자!
